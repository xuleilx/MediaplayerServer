/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GDBUSMEDIAPLAYERSERVER_H__
#define __GDBUSMEDIAPLAYERSERVER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsae.mediaplayerserver.mediaplayer */

#define TYPE_MEDIAPLAYER (mediaplayer_get_type ())
#define MEDIAPLAYER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAPLAYER, Mediaplayer))
#define IS_MEDIAPLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAPLAYER))
#define MEDIAPLAYER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MEDIAPLAYER, MediaplayerIface))

struct _Mediaplayer;
typedef struct _Mediaplayer Mediaplayer;
typedef struct _MediaplayerIface MediaplayerIface;

struct _MediaplayerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_pause) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_seek) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    guint arg_secs);

  gboolean (*handle_set_file) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filepath);

  gboolean (*handle_set_rate) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gdouble arg_rate);

  gboolean (*handle_start) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation);

  void (*notify_eos) (
    Mediaplayer *object);

  void (*notify_error) (
    Mediaplayer *object,
    const gchar *arg_messge);

  void (*notify_progress) (
    Mediaplayer *object,
    guint arg_position,
    guint arg_duration);

};

GType mediaplayer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mediaplayer_interface_info (void);
guint mediaplayer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mediaplayer_complete_start (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);

void mediaplayer_complete_pause (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);

void mediaplayer_complete_stop (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);

void mediaplayer_complete_seek (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);

void mediaplayer_complete_set_rate (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);

void mediaplayer_complete_set_file (
    Mediaplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean ret);



/* D-Bus signal emissions functions: */
void mediaplayer_emit_notify_progress (
    Mediaplayer *object,
    guint arg_position,
    guint arg_duration);

void mediaplayer_emit_notify_error (
    Mediaplayer *object,
    const gchar *arg_messge);

void mediaplayer_emit_notify_eos (
    Mediaplayer *object);



/* D-Bus method calls: */
void mediaplayer_call_start (
    Mediaplayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_start_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_start_sync (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);

void mediaplayer_call_pause (
    Mediaplayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_pause_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_pause_sync (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);

void mediaplayer_call_stop (
    Mediaplayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_stop_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_stop_sync (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);

void mediaplayer_call_seek (
    Mediaplayer *proxy,
    guint arg_secs,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_seek_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_seek_sync (
    Mediaplayer *proxy,
    guint arg_secs,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);

void mediaplayer_call_set_rate (
    Mediaplayer *proxy,
    gdouble arg_rate,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_set_rate_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_set_rate_sync (
    Mediaplayer *proxy,
    gdouble arg_rate,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);

void mediaplayer_call_set_file (
    Mediaplayer *proxy,
    const gchar *arg_filepath,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediaplayer_call_set_file_finish (
    Mediaplayer *proxy,
    gboolean *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean mediaplayer_call_set_file_sync (
    Mediaplayer *proxy,
    const gchar *arg_filepath,
    gboolean *out_ret,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_MEDIAPLAYER_PROXY (mediaplayer_proxy_get_type ())
#define MEDIAPLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAPLAYER_PROXY, MediaplayerProxy))
#define MEDIAPLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIAPLAYER_PROXY, MediaplayerProxyClass))
#define MEDIAPLAYER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIAPLAYER_PROXY, MediaplayerProxyClass))
#define IS_MEDIAPLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAPLAYER_PROXY))
#define IS_MEDIAPLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIAPLAYER_PROXY))

typedef struct _MediaplayerProxy MediaplayerProxy;
typedef struct _MediaplayerProxyClass MediaplayerProxyClass;
typedef struct _MediaplayerProxyPrivate MediaplayerProxyPrivate;

struct _MediaplayerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MediaplayerProxyPrivate *priv;
};

struct _MediaplayerProxyClass
{
  GDBusProxyClass parent_class;
};

GType mediaplayer_proxy_get_type (void) G_GNUC_CONST;

void mediaplayer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mediaplayer *mediaplayer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Mediaplayer *mediaplayer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mediaplayer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mediaplayer *mediaplayer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Mediaplayer *mediaplayer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MEDIAPLAYER_SKELETON (mediaplayer_skeleton_get_type ())
#define MEDIAPLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAPLAYER_SKELETON, MediaplayerSkeleton))
#define MEDIAPLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIAPLAYER_SKELETON, MediaplayerSkeletonClass))
#define MEDIAPLAYER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIAPLAYER_SKELETON, MediaplayerSkeletonClass))
#define IS_MEDIAPLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAPLAYER_SKELETON))
#define IS_MEDIAPLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIAPLAYER_SKELETON))

typedef struct _MediaplayerSkeleton MediaplayerSkeleton;
typedef struct _MediaplayerSkeletonClass MediaplayerSkeletonClass;
typedef struct _MediaplayerSkeletonPrivate MediaplayerSkeletonPrivate;

struct _MediaplayerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MediaplayerSkeletonPrivate *priv;
};

struct _MediaplayerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mediaplayer_skeleton_get_type (void) G_GNUC_CONST;

Mediaplayer *mediaplayer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.hsae.mediaplayerserver.mediainfo */

#define TYPE_MEDIAINFO (mediainfo_get_type ())
#define MEDIAINFO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAINFO, Mediainfo))
#define IS_MEDIAINFO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAINFO))
#define MEDIAINFO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MEDIAINFO, MediainfoIface))

struct _Mediainfo;
typedef struct _Mediainfo Mediainfo;
typedef struct _MediainfoIface MediainfoIface;

struct _MediainfoIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_image) (
    Mediainfo *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filePath,
    const gchar *arg_imagePath);

  gboolean (*handle_get_tags) (
    Mediainfo *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filePath);

};

GType mediainfo_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mediainfo_interface_info (void);
guint mediainfo_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mediainfo_complete_get_tags (
    Mediainfo *object,
    GDBusMethodInvocation *invocation,
    const gchar *title,
    const gchar *artist,
    const gchar *album);

void mediainfo_complete_get_image (
    Mediainfo *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void mediainfo_call_get_tags (
    Mediainfo *proxy,
    const gchar *arg_filePath,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediainfo_call_get_tags_finish (
    Mediainfo *proxy,
    gchar **out_title,
    gchar **out_artist,
    gchar **out_album,
    GAsyncResult *res,
    GError **error);

gboolean mediainfo_call_get_tags_sync (
    Mediainfo *proxy,
    const gchar *arg_filePath,
    gchar **out_title,
    gchar **out_artist,
    gchar **out_album,
    GCancellable *cancellable,
    GError **error);

void mediainfo_call_get_image (
    Mediainfo *proxy,
    const gchar *arg_filePath,
    const gchar *arg_imagePath,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mediainfo_call_get_image_finish (
    Mediainfo *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mediainfo_call_get_image_sync (
    Mediainfo *proxy,
    const gchar *arg_filePath,
    const gchar *arg_imagePath,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_MEDIAINFO_PROXY (mediainfo_proxy_get_type ())
#define MEDIAINFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAINFO_PROXY, MediainfoProxy))
#define MEDIAINFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIAINFO_PROXY, MediainfoProxyClass))
#define MEDIAINFO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIAINFO_PROXY, MediainfoProxyClass))
#define IS_MEDIAINFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAINFO_PROXY))
#define IS_MEDIAINFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIAINFO_PROXY))

typedef struct _MediainfoProxy MediainfoProxy;
typedef struct _MediainfoProxyClass MediainfoProxyClass;
typedef struct _MediainfoProxyPrivate MediainfoProxyPrivate;

struct _MediainfoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MediainfoProxyPrivate *priv;
};

struct _MediainfoProxyClass
{
  GDBusProxyClass parent_class;
};

GType mediainfo_proxy_get_type (void) G_GNUC_CONST;

void mediainfo_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mediainfo *mediainfo_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Mediainfo *mediainfo_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mediainfo_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mediainfo *mediainfo_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Mediainfo *mediainfo_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MEDIAINFO_SKELETON (mediainfo_skeleton_get_type ())
#define MEDIAINFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MEDIAINFO_SKELETON, MediainfoSkeleton))
#define MEDIAINFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MEDIAINFO_SKELETON, MediainfoSkeletonClass))
#define MEDIAINFO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MEDIAINFO_SKELETON, MediainfoSkeletonClass))
#define IS_MEDIAINFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MEDIAINFO_SKELETON))
#define IS_MEDIAINFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MEDIAINFO_SKELETON))

typedef struct _MediainfoSkeleton MediainfoSkeleton;
typedef struct _MediainfoSkeletonClass MediainfoSkeletonClass;
typedef struct _MediainfoSkeletonPrivate MediainfoSkeletonPrivate;

struct _MediainfoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MediainfoSkeletonPrivate *priv;
};

struct _MediainfoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mediainfo_skeleton_get_type (void) G_GNUC_CONST;

Mediainfo *mediainfo_skeleton_new (void);


G_END_DECLS

#endif /* __GDBUSMEDIAPLAYERSERVER_H__ */
